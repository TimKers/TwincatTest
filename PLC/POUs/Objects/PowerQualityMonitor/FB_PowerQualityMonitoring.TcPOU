<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_PowerQualityMonitoring" Id="{75ca40aa-90dd-43f2-a6a5-a74fe86c99a5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PowerQualityMonitoring
VAR_OUTPUT
	get						: ST_PowerMonitor_get;
END_VAR

VAR_INPUT
	b_Enable		: 	BOOL;
	PowerStackGet	:	st_Powerstack_Get;	// change into reference?
	b_TNModeActive	:	BOOL;
END_VAR

VAR
	Janitza: FB_Janitza;
	El3443: FB_EL3443_0010;
END_VAR

VAR CONSTANT
	w_ID : WORD := 1;//:= eObject_ID.PowerMonitor;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
Update rate is 200 ms max.
So call IO method only every 200ms.
More calls only increase cpu and network load.
*)

//get data from janitza powermeter
Janitza(get:=get, ReadData:=b_Enable, b_TNmodeEnable := b_TNModeActive);
EL3443(get:=get, b_Enable:=b_Enable);

//Voltage dependent values of Internal supply are copied from outputfield, but are only valid if netcontactor is closed.
IF (PowerStackGet.e_NetContactorStatus = eNetcontactorState.LeftClosed) OR 
	(PowerStackGet.e_NetContactorStatus = eNetcontactorState.RightClosed) THEN
	get.InternalSupply.e_ACrotationStatus := get.OutputField.e_ACrotationStatus;
	get.InternalSupply.r_LineVoltage := get.OutputField.r_LineVoltage;
	get.InternalSupply.r_PhaseVoltage := get.OutputField.r_PhaseVoltage;
	get.InternalSupply.r_Frequency := get.OutputField.r_Frequency;
ELSE
	get.InternalSupply.e_ACrotationStatus 	:= 	eACRotationSTate.None;
	
	get.InternalSupply.r_LineVoltage[phases.L1] 		:= 	0;
	get.InternalSupply.r_LineVoltage[phases.L2] 		:= 	0;
	get.InternalSupply.r_LineVoltage[phases.L3] 		:= 	0;
	get.InternalSupply.r_LineVoltage[phases.AVG] 		:= 	0;
	
	get.InternalSupply.r_PhaseVoltage[phases.L1] 		:= 	0;
	get.InternalSupply.r_PhaseVoltage[phases.L2] 		:= 	0;
	get.InternalSupply.r_PhaseVoltage[phases.L3] 		:= 	0;
	get.InternalSupply.r_PhaseVoltage[phases.AVG] 		:= 	0;
	
	get.InternalSupply.r_Frequency						:= 	0;
END_IF



//Fill BESS data with PowerStackData
//Not all data is filled in here, determine which are desired and possible.

//phase currents not available at this time, only the average is set
get.BESS.r_Current[Phases.AVG] := PowerStackGet.r_AcCurrent;

//phase Powers not available at this time, only the average is set
Get.BESS.r_ApparentPower	:=	PowerStackGet.r_ApparentPower;
Get.BESS.r_ReactivePower	:=	PowerStackGet.r_ReactivePower;
Get.BESS.r_ActivePower		:=	PowerStackGet.r_ActivePower;
	
Get.BESS.r_Frequency		:=  PowerStackGet.r_ACSupplyFrequency;

//phase Powerfactors not available at this time, only the average is set									
Get.BESS.r_PowerFactor[Phases.AVG]		:=	PowerStackGet.r_CosPhi;
]]></ST>
    </Implementation>
    <Method Name="EMstop" Id="{dba90011-b861-45ad-8aa0-9a2a7153b64d}">
      <Declaration><![CDATA[METHOD PUBLIC EMstop : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[//returns true when ready/stopped]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetDiagnostics" Id="{0a04c0fc-70cf-404d-9c95-f56be517174e}">
      <Declaration><![CDATA[METHOD GetDiagnostics
VAR_IN_OUT
	AddError		: ARRAY [*] OF FB_AddErrorST;
	a_ActiveEvents	: ARRAY [*] OF ST_ErrorStruct;
	w_Index			: WORD;
END_VAR

VAR_OUTPUT
	b_errorActive	: BOOL;
	b_warningActive	: BOOL;
END_VAR

VAR
	by_errCt	: BYTE;
	by_warnCt	: BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//JANITZA
(*Comm Warning*)		AddError[w_Index](
		in_b_ErrorTrig			:= get.events.b_MBCommWarning,
		out_ST_Error			:= a_ActiveEvents[w_Index],
		w_ID					:= 1 + w_ID,
		s_Message				:= 'PowerQualityMonitor communication warning',
		e_sev					:= eseverity.warning
	);
	IF AddError[w_Index].b_out THEN by_warnCt := by_warnCt + 1; END_IF;
	w_Index := w_Index +1;
	
(*Comm timeout*)		AddError[w_Index](
		in_b_ErrorTrig			:= get.events.b_MBTimeoutWarning,
		out_ST_Error			:= a_ActiveEvents[w_Index],
		w_ID					:= 2 + w_ID,
		s_Message				:= 'PowerQualityMonitor communication timeout',
		e_sev					:= eseverity.Warning
	);
	IF AddError[w_Index].b_out THEN by_warnCt := by_warnCt + 1; END_IF;
	w_Index := w_Index +1;
	
(*Comm fault*)		AddError[w_Index](
		in_b_ErrorTrig			:= get.events.b_MBCommError,
		out_ST_Error			:= a_ActiveEvents[w_Index],
		w_ID					:= 3 + w_ID,
		in_t_triggerTime		:= T#10S,
		s_Message				:= 'PowerQualityMonitor communication fault',
		e_sev					:= eseverity.Normalshutdown
	);
	IF AddError[w_Index].b_out THEN by_errCt := by_errCt + 1; END_IF;
	w_Index := w_Index +1;
	
//EL3443
(*Comm Warning*)		AddError[w_Index](
		in_b_ErrorTrig			:= get.events.b_EL3443Warning,
		out_ST_Error			:= a_ActiveEvents[w_Index],
		w_ID					:= 4 + w_ID,
		s_Message				:= 'EL3443 powermonitor warning',
		e_sev					:= eseverity.Warning
	);
	IF AddError[w_Index].b_out THEN by_warnCt := by_warnCt + 1; END_IF;
	w_Index := w_Index +1;
	
(*Comm Fault*)		AddError[w_Index](
		in_b_ErrorTrig			:= get.events.b_EL3443Error,
		out_ST_Error			:= a_ActiveEvents[w_Index],
		w_ID					:= 5 + w_ID,
		s_Message				:= 'EL3443 powermonitor fault',
		e_sev					:= eseverity.NormalShutdown
	);
	IF AddError[w_Index].b_out THEN by_errCt := by_errCt + 1; END_IF;
	w_Index := w_Index +1;

b_errorActive := by_errCt <>0;
b_warningActive := by_warnCt <>0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{38d5ccda-e850-40a7-8651-95c4a192ccc5}">
      <Declaration><![CDATA[METHOD Public Reset : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//clear data struct
//reinitialize janitza + el3443
//clear all errors?

//returns true when ready]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_PowerQualityMonitoring">
      <LineId Id="275" Count="4" />
      <LineId Id="282" Count="2" />
      <LineId Id="345" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="368" Count="1" />
      <LineId Id="371" Count="2" />
      <LineId Id="376" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="387" Count="2" />
      <LineId Id="385" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="431" Count="1" />
      <LineId Id="396" Count="0" />
      <LineId Id="433" Count="1" />
      <LineId Id="400" Count="0" />
      <LineId Id="435" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="413" Count="3" />
      <LineId Id="422" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="403" Count="0" />
    </LineIds>
    <LineIds Name="FB_PowerQualityMonitoring.EMstop">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PowerQualityMonitoring.GetDiagnostics">
      <LineId Id="97" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="9" Count="5" />
      <LineId Id="96" Count="0" />
      <LineId Id="15" Count="8" />
      <LineId Id="95" Count="0" />
      <LineId Id="24" Count="9" />
      <LineId Id="65" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="98" Count="0" />
      <LineId Id="36" Count="6" />
      <LineId Id="94" Count="0" />
      <LineId Id="43" Count="8" />
      <LineId Id="93" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="92" Count="0" />
    </LineIds>
    <LineIds Name="FB_PowerQualityMonitoring.Reset">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>